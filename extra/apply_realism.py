"""
Apply realism (PSF, shot noise, background noise) to idealized images.
This example is valid only for i-band images from the third data release
of the Hyper Suprime-Cam (HSC) Subaru Strategic Program (SSP).

Author: Vicente Rodriguez-Gomez <vrodgom.astro@gmail.com>
"""
import numpy as np
import matplotlib.pyplot as plt
from astropy.io import fits
from astropy.visualization import LogStretch, simple_norm
from astropy.stats import gaussian_sigma_to_fwhm  # approx. 2.35
from astropy.convolution import convolve

# HSC g,r,i,z,Y bands correspond to layers 0,1,2,3,4
band = 2


def convolve_gaussian_psf(image, psf_fwhm, arcsec_per_pixel, nsigma=5.0):
    """
    Convolve image with a Gaussian PSF.
    """
    psf_sigma_pixels = (psf_fwhm / gaussian_sigma_to_fwhm) / arcsec_per_pixel

    # Number of pixels on each side from the center:
    size = int(np.ceil(nsigma * psf_sigma_pixels))

    # Create PSF as 2D array:
    y, x = np.mgrid[-size: size + 1, -size: size + 1]
    psf = np.exp(-(x**2 + y**2)/(2.0 * psf_sigma_pixels**2))
    psf /= np.sum(psf)

    return convolve(image, psf)


def apply_shot_noise(image, ZP, mag_for_1_e_per_s, exposure_time):
    """
    Apply shot (Poisson) noise to an image.
    """
    rng = np.random.default_rng(0)

    # Factor to convert from ADU/s to electrons (per pixel),
    # sometimes known as the effective gain:
    gain = 10.0**((mag_for_1_e_per_s - ZP) / 2.5) * exposure_time

    # Return random samples from a Poisson distribution,
    # renormalized to ADU/s:
    return rng.poisson(image * gain) / gain


def apply_background_noise(image, sky_sigma):
    """
    Add uniform Gaussian background noise.
    """
    rng = np.random.default_rng(0)

    return image + sky_sigma * rng.standard_normal(size=image.shape)


if __name__ == '__main__':
    # Subfind IDs generated by the example in the README:
    subfind_ids = [
        0,
        9162,
        17714,
        29896,
        40848,
        51666,
        56043,
        60225,
        65502,
        69432,
        72962,
        107965,
        126425,
    ]

    # HSC-SSP (DR3) parameters for i-band images from the "wide" layer:
    exposure_time = 1200.0  # s
    psf_fwhm = 0.61  # arcsec
    arcsec_per_pixel = 0.168  # https://hsc.mtk.nao.ac.jp/ssp/survey
    mag_for_1_e_per_s = 28.5  # https://www.subarutelescope.org/Observing/Instruments/HSC/sensitivity.html
    ZP = 27.0  # zero-point of real HSC images (idealized ones have ZP = 0)
    sky_sigma = 0.06  # typical std per pixel of real HSC images

    # Apply realism to the first nine i-band images:
    fig = plt.figure(figsize=(8.3, 8.3))
    fig.subplots_adjust(left=0.0, right=1.0, bottom=0.0, top=1.0, hspace=0.02, wspace=0.02)
    for k, subfind_id in enumerate(subfind_ids[:9]):
        ax = fig.add_subplot(3, 3, k + 1)

        # Read data
        with fits.open('broadband_%d.fits' % (subfind_id,)) as hdulist:
            image = hdulist[0].data[band, :, :]  # maggies

        # Use the same image units as the real HSC data, i.e. change the
        # zero-point from 0.0 (maggies) to 27.0 (ADU/s):
        fluxmag0 = 10.0**(ZP / 2.5)
        image *= fluxmag0  # ADU/s

        # Apply realism
        image = convolve_gaussian_psf(image, psf_fwhm, arcsec_per_pixel)
        image = apply_shot_noise(image, ZP, mag_for_1_e_per_s, exposure_time)
        image = apply_background_noise(image, sky_sigma)

        # View final image
        norm = simple_norm(image, stretch='log', log_a=10000)
        ax.imshow(norm(image), cmap='gray', origin='lower')
        ax.get_xaxis().set_visible(False)
        ax.get_yaxis().set_visible(False)

    fig.savefig('hsc_realistic.png')
    plt.close(fig)
